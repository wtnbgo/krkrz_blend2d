/**
  * 描画外観情報
  * @description Illustrator のアピアランスをイメージしてください。
  * 描画に対して、複数のブラシ（塗り）とペン（線）を指定できます。
  * 先に追加した方が下に入ります
  */
class B2DAppearance {

    /**
        * コンストラクタ
        */
    function B2DAppearance();

    /**
        * 情報のクリア
        */
    function clear();

    /**
        * ブラシの追加
        * @param colorOrBrush ARGB色指定またはブラシ情報（辞書）
        * @param ox 表示オフセットX
        * @param oy 表示オフセットY
        * @throws Exception ブラシ生成に失敗
        * @description
        * ブラシ情報定義
        * 基本  点指定は [x,y] の配列または %[x:x, y:y] の辞書
        *       矩形指定は [x,y,width,height] の配列または %[x:x, y:y, width:w, height:h] の辞書
        *       色指定は ARGB 32bit整数値
        *       パラメータについては GDI+ のドキュメントを見て研究してください
        *
        * type: ブラシ種別 BrushType で指定
        *
        *  BrushTypeSolidColor の場合 ※直接ARGBで色指定した場合と同じです
        *    color: 色指定(未指定時は白)
        *   
        *  BrushTypeTextureFill の場合
        *   image: 画像指定
        *   wrapMode: 繰り返しパターン指定(未指定時は WrapModeTile)
        *   dstRect: テクスチャ領域矩形指定(未指定時は画像全部)
        *
        */
    function addBrush(colorOrBrush, ox, oy);
    
    /**
        * ペンの追加
        * @param colorOrBrush ARGB色指定またはブラシ情報（辞書）
        * @param widthOrOption ペン幅またはペン情報（辞書）
        * @param ox 表示オフセットX
        * @param oy 表示オフセットY
        * @throws Exception ブラシ生成に失敗
        * @description
        * ペン情報定義: widthOrOption が辞書の場合は詳細情報定義になります
        *
        *  width: ペン幅指定
        *  alignment: アラインメント：省略時は PenAlignmentCenter
        */
    function addPen(colorOrBrush, widthOrOption, ox, oy);
};



/**
 * Blend2D用描画コンテキスト
 */
class B2DContext extends Blend2DContext {

    function B2DContext(target) {

    property matrix : B2DMatrix; //< 描画マトリックス
    property clipRect : B2DRect; //< クリッピング領域

    /**
    * パスの描画
    * @param app アピアランス GdiPlus.Appearance で描画スタイルを指定します
    * @param path パス GdiPlus.Path を指定します
    * @return 更新領域情報の辞書 left, top, width, height
    */
    function drawPath(app, path);

    // -------------------------------------------------------------

    /**
        * 文字列のパスベースでの描画
        * @param font フォント GdiPlus.Font でフォントを指定します
        * @param app アピアランス GdiPlus.Appearance で描画スタイルを指定します
        * @param x 描画位置X
        * @param y 描画位置Y
        * @param text 描画テキスト
        * @return 更新域情報(RectF)
        */
    function drawPathString(font, app, x, y, text);

    // -------------------------------------------------------------

    /**
    * 画像の描画。コピー先は元画像の Bounds を配慮した位置、サイズは Pixel 指定になります。
    * @param x コピー先原点X
    * @param y コピー先原点Y
    * @param image コピー元画像(Layer/Bitmap)
    * @return 更新域情報(RectF)
    */
    function drawImage(x, y, image);

    /**
    * 画像の矩形コピー
    * @param dleft コピー先左端
    * @param dtop  コピー先上端
    * @param src コピー元画像(Image/Layer/ファイル名)
    * @param sleft 元矩形の左端
    * @param stop  元矩形の上端
    * @param swidth 元矩形の横幅
    * @param sheight  元矩形の縦幅
    * @return 更新域情報(RectF)
    */
    function drawImageRect(dleft, dtop, src, sleft, stop, swidth, sheight);

    /**
    * 画像の拡大縮小コピー
    * @param dleft コピー先左端
    * @param dtop  コピー先上端
    * @param dwidth コピー先の横幅
    * @param dheight  コピー先の縦幅
    * @param src コピー元画像(Image/Layer/ファイル名)
    * @param sleft 元矩形の左端
    * @param stop  元矩形の上端
    * @param swidth 元矩形の横幅
    * @param sheight  元矩形の縦幅
    * @return 更新域情報(RectF)
    */
    function drawImageStretch(dleft, dtop, dwidth, dheight, src, sleft, stop, swidth, sheight);

    /**
    * 画像のアフィン変換コピー
    * @param src コピー元画像(Image/Layer/ファイル名)
    * @param sleft 元矩形の左端
    * @param stop  元矩形の上端
    * @param swidth 元矩形の横幅
    * @param sheight  元矩形の縦幅
    * @param affine アフィンパラメータの種類(true:変換行列, false:座標指定), 
    * @return 更新域情報(RectF)
    */
    function drawImageAffine(src, sleft, stop, swidth, sheight, affine, A, B, C, D, E, F);

};
